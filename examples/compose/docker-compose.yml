version: "3.9"

# The following command must be executed after each restart on linux or opensearch exits with an error
# sudo sysctl -w vm.max_map_count=262144

services:
  opensearch:
    image: public.ecr.aws/opensearchproject/opensearch:2
    hostname: opensearch
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch # Name the node that will run in this container
      - discovery.seed_hosts=opensearch # Nodes to look for when discovering the cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m" # Set min and max JVM heap sizes to at least 50% of system RAM
      - "DISABLE_INSTALL_DEMO_CONFIG=true" # Prevents execution of bundled demo script which installs demo certificates and security configurations to OpenSearch
      - "DISABLE_SECURITY_PLUGIN=true" # Disables security plugin
    ports:
      - "9200:9200"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data:/usr/share/opensearch/data
    networks:
      - opensearch
  dashboards:
    image: public.ecr.aws/opensearchproject/opensearch-dashboards:2
    container_name: dashboards
    environment:
      - 'OPENSEARCH_HOSTS=["http://opensearch:9200"]'
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true" # disables security dashboards plugin in OpenSearch Dashboards
    depends_on:
      - opensearch
    ports:
      - "5601:5601"
    networks:
      - opensearch
  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: |
      sh -c 
      "((sleep 15 && echo 'kafka up' && 
      kafka-topics.sh --create --if-not-exists --bootstrap-server 127.0.0.1:9092 --replication-factor 1 --partitions 4 --topic consumer && 
      kafka-topics.sh --create --if-not-exists --bootstrap-server 127.0.0.1:9092 --replication-factor 1 --partitions 4 --topic errors && 
      kafka-topics.sh --create --if-not-exists --bootstrap-server 127.0.0.1:9092 --replication-factor 1 --partitions 4 --topic producer)&) && 
      /opt/bitnami/scripts/kafka/run.sh"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic consumer --describe",
        ]
    networks:
      - kafka
  kafka-exporter:
    image: bitnami/kafka-exporter
    container_name: kafkaexporter
    command: ["--kafka.server=kafka:9092"]
    ports:
      - "9308:9308"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka
      - prometheus
  logprep:
    build:
      context: ..
      args:
        LOGPREP_VERSION: dev
        PYTHON_VERSION: "3.11"
    image: logprep
    container_name: logprep
    profiles:
      - logprep
    expose:
      - 8001
    network_mode: host
    depends_on:
      - kafka
      - opensearch
    volumes:
      - ../../examples/:/home/logprep/examples/
    tmpfs:
      - /tmp/logprep/prometheus_multiproc
    entrypoint:
      - logprep
      - run
      - /home/logprep/examples/exampledata/config/pipeline.yml
  grafana:
    image: bitnami/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ../../examples/exampledata/config/grafana/datasources:/opt/bitnami/grafana/conf/provisioning/datasources
      - ../../examples/exampledata/config/grafana/dashboards:/opt/bitnami/grafana/conf/provisioning/dashboards
    networks:
      - prometheus
  prometheus:
    image: bitnami/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../../examples/exampledata/config/prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml
    networks:
      - kafka
      - prometheus
    extra_hosts:
      # enables prometheus to access the host system (eg when logprep is running locally in the terminal)
      - "host.docker.internal:192.168.223.41"
  config:
    image: nginx:latest
    container_name: config
    profiles:
      - basic_auth
    ports:
      - "8081:8081"
    volumes:
      - ../../examples/exampledata:/usr/share/nginx/html:ro
      - ../../examples/exampledata/config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../examples/exampledata/config/nginx/conf.d:/etc/nginx/conf.d:ro
  mtls-config:
    image: nginx:latest
    container_name: mtls-config
    profiles:
      - mtls
    ports:
      - "8082:8082"
    volumes:
      - ../../examples/exampledata:/usr/share/nginx/html:ro
      - ../../examples/exampledata/config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../../examples/exampledata/config/nginx/mtls.conf.d:/etc/nginx/conf.d:ro
  keycloak:
    image: bitnami/keycloak:latest
    container_name: keycloak
    ports:
      - "8080:8080"
    profiles:
      - oauth2
    volumes:
      - ../../examples/exampledata/config/keycloak:/opt/keycloak/data/import
    environment:
      KEYCLOAK_ADMIN_USER: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_DATABASE_HOST: keycloak_db
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_NAME: keycloak
      KEYCLOAK_DATABASE_USER: keycloak
      KEYCLOAK_DATABASE_PASSWORD: bitnami
      KEYCLOAK_HTTP_PORT: 8080
      KEYCLOAK_HTTPS_PORT: 8443
      KEYCLOAK_BIND_ADDRESS: 127.0.0.1
      KEYCLOAK_EXTRA_ARGS: "-Dkeycloak.import=/opt/keycloak/data/import/"
    networks:
      - keycloak
  keycloak_db:
    image: bitnami/postgresql:latest
    container_name: keycloak_db
    expose:
      - 5432
    profiles:
      - oauth2
    environment:
      POSTGRESQL_PASSWORD: bitnami
      POSTGRESQL_POSTGRES_PASSWORD: bitnami
      POSTGRESQL_DATABASE: keycloak
      POSTGRESQL_USERNAME: keycloak
    volumes:
      - keycloak-db-volume:/var/lib/postgresql/data
    networks:
      - ucl
      - keycloak
  fda-api:
    image: registry.gitlab.com/z-e-u-s/fda/fda-backend:0.25.0
    container_name: fda-api
    read_only: true
    environment:
      POSTGRES_HOST: fda-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: fda
      POSTGRES_USER: fda
      POSTGRES_PASSWORD: fda
      THROTTLE_RATE_ANON: 1000/day
      THROTTLE_RATE_USER: 1000/day
      WEB_CONCURRENCY: 4
      SECURE_SSL_REDIRECT: "False"
      SERVICE_BASE_URL: http://localhost:8000/api/v1
      DJANGO_SECRET_KEY: "django-insecure-*w($$5i@@iq%!ygufa%%@nfdplt(!e#hoahnjy^@6xdutl8mlqz"
      ALLOWED_HOSTS: "*"
      CORS_ALLOWED_ORIGINS: "http://localhost"
      CORS_ALLOWED_ALLOW_ALL: "True"
      DJANGO_DEBUG: "True"
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logprep
      KEYCLOAK_CLIENT_ID: fda-backend
      KEYCLOAK_CLIENT_ID_FOR_AUTHZ_ROLES: fda
      KEYCLOAK_CLIENT_SECRET: Kh4tz3wMcBMrPdGVuQeOv3aTlPKpQfOw
      KEYCLOAK_VERIFY_CERTIFICATE: "False"
      KEYCLOAK_VALIDATE_ISSUER: "False"
      SECURE_REDIRECT_EXEMPT: '[".*localhost.*"]'
    depends_on:
      fda-db:
        condition: service_healthy
    entrypoint:
      - ./docker/docker-entrypoint.sh
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    networks:
      - fda
      - keycloak
  fda-db:
    container_name: fda-db
    image: "postgres:14"
    read_only: true
    volumes:
      - fda-db-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: fda
      POSTGRES_USER: fda
      POSTGRES_DB: fda
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER && psql --username=$$POSTGRES_USER --list"
      interval: 8s
      timeout: 5s
      retries: 10
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /run/postgresql
    networks:
      - fda
  fda-frontend:
    image: registry.gitlab.com/z-e-u-s/fda/fda-frontend:0.25.0
    container_name: fda-frontend
    depends_on:
      fda-api:
        condition: service_started
    ports:
      - "3002:80"
    volumes:
      - ../../examples/exampledata/config/fda/config.json:/usr/share/nginx/html/assets/config/keycloak/config.json
      - ../../examples/exampledata/config/fda/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - fda
  ucl-api:
    image: registry.gitlab.com/z-e-u-s/ucl/ucl-backend:0.25.0
    container_name: ucl-api
    read_only: true
    environment:
      POSTGRES_HOST: ucl-db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ucl
      POSTGRES_USER: ucl
      POSTGRES_PASSWORD: ucl
      THROTTLE_RATE_ANON: 1000/day
      THROTTLE_RATE_USER: 1000/day
      WEB_CONCURRENCY: 4
      SECURE_SSL_REDIRECT: "False"
      UCL_BASE_URL: http://localhost:8000/api/v1
      DJANGO_SECRET_KEY: "django-insecure-secret_key"
      ALLOWED_HOSTS: "*"
      CORS_ALLOWED_ORIGINS: http://localhost # neccessary if CORS_ORIGIN_ALLOW_ALL=FALSE
      CORS_ORIGIN_ALLOW_ALL: "True"
      DJANGO_DEBUG: "True"
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_REALM: logprep
      KEYCLOAK_CLIENT_ID: ucl-backend
      KEYCLOAK_CLIENT_ID_FOR_AUTHZ_ROLES: ucl
      KEYCLOAK_CLIENT_SECRET: CwPAptWESjdJXboOLTnHRBpf5MnsC3UY
      KEYCLOAK_VERIFY_CERTIFICATE: "False"
      KEYCLOAK_VALIDATE_ISSUER: "False"
      # FDA_BASE_URL: http://fda-frontend
    depends_on:
      ucl-db:
        condition: service_healthy
    entrypoint:
      - ./docker/docker-entrypoint.sh
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
    networks:
      - ucl
      - keycloak
  ucl-db:
    container_name: ucl-db
    image: "postgres:14"
    read_only: true
    volumes:
      - ucl-db-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ucl
      POSTGRES_PASSWORD: ucl
      POSTGRES_DB: ucl
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER && psql --username=$$POSTGRES_USER --list"
      interval: 8s
      timeout: 5s
      retries: 10
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /run/postgresql
    networks:
      - ucl
  ucl-frontend:
    image: registry.gitlab.com/z-e-u-s/ucl/ucl-frontend:0.25.0
    container_name: ucl-frontend
    depends_on:
      ucl-api:
        condition: service_started
    ports:
      - "3001:80"
    volumes:
      - ../../examples/exampledata/config/ucl/nginx.example.conf:/etc/nginx/conf.d/default.conf
      - ../../examples/exampledata/config/ucl/general.example.json:/usr/share/nginx/html/assets/config/general/config.json
      - ../../examples/exampledata/config/ucl/keycloak.example.json:/usr/share/nginx/html/assets/config/keycloak/config.json
    networks:
      - ucl

volumes:
  opensearch-data:
  fda-db-volume:
  ucl-db-volume:
  keycloak-db-volume:

networks:
  opensearch:
    ipam:
      config:
        - subnet: 192.168.223.0/29
          gateway: 192.168.223.1
  fda:
    ipam:
      config:
        - subnet: 192.168.223.8/29
          gateway: 192.168.223.9
  ucl:
    ipam:
      config:
        - subnet: 192.168.223.16/29
          gateway: 192.168.223.17
  keycloak:
    ipam:
      config:
        - subnet: 192.168.223.24/29
          gateway: 192.168.223.25
  kafka:
    ipam:
      config:
        - subnet: 192.168.223.32/29
          gateway: 192.168.223.33
  prometheus:
    ipam:
      config:
        - subnet: 192.168.223.40/29
          gateway: 192.168.223.41
